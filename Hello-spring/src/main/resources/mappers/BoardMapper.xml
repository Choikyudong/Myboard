<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Hellospring.mapper.BoardMapper">

	<!-- 마이바티스에서 sql쿼리문이 정의되어 있는 파일을 
		XML Mapper라고 말한다. 그리고 mapper 네임스페이스 속성에는
		앞에서 작성한 BoardMapper 인터페이스가 경로로 들어가 있다.
		즉 namespace는 해당 페이지의 쿼리문과 BoardMapper 인터페이스의
		메서드를 매핑하기 위해 지정하는 속성이다. -->
	 
	<!-- 밑으로 가기전 정리 
		parameterType이란 쿼리 실행에 필요한 파라미터 타입을
		해당 속성에 맞춰 지정하는 것
		resultType이란 쿼리의 실행 결과를 매핑할 타입을 지정
		그리고 전달받은 파라미터는 #{}으로 처리한다.--> 
	 
	<!-- 마이바티스 sql태그로 공통으로 사용 또는 반복적으로 사용되는
		sql조각을 정의할 수 있습니다. 왜 사용하냐면 *로 모든 컬럼을
		조회할 수 있지만, 서브 쿼리나 조인을 이용하거나 테이블의 컬럼 구조가
		변경될 경우를 생각하여 테이블 젙체 컬럼을 sql 조각으로 정의해서
		boardColumns라는 이름으로 사용한다. -->
		
	<sql id="boardColumns">
		idx
		,title
		,content
		,writer
		,view_cnt
		,notice_yn
		,secret_yn
		,delete_yn
		,insert_time
		,update_time
		,delete_time
	</sql>

	<insert id="insertBoard" parameterType="BoardDTO" useGeneratedKeys="true" keyProperty="idx">
	<!-- useGeneratedKeys를 true로 지정하면 INSERT 쿼리 실행과 동시에 생성된 PK가 파라미터로 전달된 객체
			BoardDTO 클래스이 객체인 params의 게시글 번호에 담긴다. -->
		INSERT INTO tb_board (
			<include refid="boardColumns" />
			<!-- sql 태그에서 정의한 boardColumns를 사용하는 태그 -->
		) VALUES (
			#{idx}
			, #{title}
			, #{content}
			, #{writer}
			, 0
			, IFNULL(#{noticeYn}, 'N')
			, IFNULL(#{secretYn}, 'N')
			, 'N'
			, NOW()
			, NULL
			, NULL
		)
	</insert>
	
	<select id="selectBoardDetail" parameterType="long" resultType="BoardDTO">
		SELECT
			<include refid="boardColumns" />
		FROM
			tb_board
		WHERE
			delete_yn = 'N'
		AND
			idx = #{idx}
	</select>
	
	<update id="updateBoard" parameterType="BoardDTO">
		UPDATE tb_board
		SET
			update_time = NOW()
			, title = #{title}
			, content = #{content}
			, writer = #{writer}
			, notice_yn = IFNULL(#{noticeYn}, 'N')
			, secret_yn = IFNULL(#{secretYn}, 'N')
		WHERE
			idx = #{idx}
	</update>
	
	<update id="deleteBoard" parameterType="long">
		UPDATE tb_board
		SET 
			delete_yn = 'Y'
			, delete_time = NOW()
		WHERE
			idx = #{idx}
	</update>
	
	<select id="selectBoardList" parameterType="BoardDTO" resultType="BoardDTO">
		SELECT
			<include refid="boardColumns" />
		FROM
			tb_board
		WHERE
			delete_yn = 'N'
		<include refid="CommonMapper.search" />
		ORDER BY
			notice_yn ASC,
			idx DESC,
			insert_time DESC
		<include refid="CommonMapper.paging" />
	</select>
		<!-- Mysql에서 LIMIT 구문은 원하는 만큼 데이터를
			가져올 때 사용하는 용도로 첫 번째 파라미터는 시작
			두 번째 파라미터는 시작 위치를 기준으로 가져올 개수 -->	

	<select id="selectBoardTotalCount" parameterType="BoardDTO" resultType="int">
		SELECT
			COUNT(*)
		FROM
			tb_board
		WHERE
			delete_yn = 'N'
		<include refid="CommonMapper.search" />
	</select>
	
</mapper>
